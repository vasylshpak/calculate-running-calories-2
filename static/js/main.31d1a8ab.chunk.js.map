{"version":3,"sources":["Result.js","Inputs.js","App.js","serviceWorker.js","index.js"],"names":["Result","className","this","props","calories","role","Component","Inputs","state","weight","distance","counted","handleFormChanges","bind","countCalories","evt","setState","target","name","value","e","preventDefault","style","color","onSubmit","htmlFor","type","placeholder","onChange","App","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAiBeA,G,KAdf,iLAGI,OACE,yBAAKC,UAAU,eACb,0CACcC,KAAKC,MAAMC,SADzB,YAC4C,IAC1C,0BAAMC,KAAK,OAAX,mCAPV,GAA4BC,cCqEbC,EApEf,YACE,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CAAEC,OAAQ,GAAIC,SAAU,GAAIC,QAAS,GAElD,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBALJ,EADrB,+EAUoBE,GAChBb,KAAKc,SAAL,eAAiBD,EAAIE,OAAOC,KAAOH,EAAIE,OAAOE,UAXlD,oCAegBC,GACZA,EAAEC,eAAeD,GAIjBlB,KAAKc,SAAS,CAAEL,QAAST,KAAKM,MAAMC,OAASP,KAAKM,MAAME,aApB5D,+BAwBI,OACE,yBAAKY,MAAO,CAAEC,MAAO,SAAWtB,UAAU,QACxC,0BAAMuB,SAAUtB,KAAKY,eACnB,yBAAKb,UAAU,eACb,mDACsB,0BAAMI,KAAK,OAAX,gBADtB,KAGA,2BAAOoB,QAAQ,sBAAf,sBACqB,0BAAMpB,KAAK,OAAX,gBADrB,MAGA,2BACEJ,UAAU,gBACVyB,KAAK,OACLR,KAAK,SACLS,YAAY,SACZR,MAAOjB,KAAKM,MAAMC,OAClBmB,SAAU1B,KAAKU,qBAGnB,yBAAKX,UAAU,cACb,2BAAOwB,QAAQ,sBAAf,gCAGA,2BACExB,UAAU,gBACVyB,KAAK,OACLR,KAAK,WACLS,YAAY,WACZR,MAAOjB,KAAKM,MAAME,SAClBkB,SAAU1B,KAAKU,oBAEjB,2BACEc,KAAK,SACLP,MAAM,YACNlB,UAAU,wBAEZ,kBAAC,EAAD,CAAQG,SAAUF,KAAKM,MAAMG,iBA5DzC,GAA4BL,aCcbuB,EAdf,iLAEI,OACE,yBACEP,MAAO,CACLQ,SAAU,UAGZ,kBAAC,EAAD,WARR,GAAyBxB,aCQLyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31d1a8ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport class Result extends Component {\n  //DUMB COMPONENT\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h2>\n          You burned {this.props.calories} calories{\" \"}\n          <span role=\"img\">ü§ô ü§ô</span>\n        </h2>\n      </div>\n    );\n  }\n}\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport Result from \"./Result\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport class Inputs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { weight: \"\", distance: \"\", counted: 0 };\n    //BIND OUR OWN THIS TO HANDLE CHANGES\n    this.handleFormChanges = this.handleFormChanges.bind(this);\n    this.countCalories = this.countCalories.bind(this);\n  }\n\n  //CHANGE\n  handleFormChanges(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n\n  //ON SUBMIT FUNCTION . CALCULATE CALORIES FORMULA AND OUTPUT\n  countCalories(e) {\n    e.preventDefault(e);\n    // const weightVal = this.state.weight;\n    // const distanceVal = this.state.distance;\n    // const sum = weightVal * distanceVal;\n    this.setState({ counted: this.state.weight * this.state.distance });\n  }\n\n  render() {\n    return (\n      <div style={{ color: \"white\" }} className=\"m-1 \">\n        <form onSubmit={this.countCalories}>\n          <div className=\"col-sm-10  \">\n            <h1>\n              WHAT YOU SCORE TODAY<span role=\"img\">üññ</span>?\n            </h1>\n            <label htmlFor=\"exampleInputEmail1\">\n              What is your weight<span role=\"img\">üßÅ</span> ?\n            </label>\n            <input\n              className=\"form-control \"\n              type=\"text\"\n              name=\"weight\"\n              placeholder=\"weight\"\n              value={this.state.weight}\n              onChange={this.handleFormChanges}\n            />\n          </div>\n          <div className=\"col-sm-10 \">\n            <label htmlFor=\"exampleInputEmail1\">\n              How many kilometers you run?\n            </label>\n            <input\n              className=\"form-control \"\n              type=\"text\"\n              name=\"distance\"\n              placeholder=\"distance\"\n              value={this.state.distance}\n              onChange={this.handleFormChanges}\n            />\n            <input\n              type=\"submit\"\n              value=\"CHECK OUT\"\n              className=\"btn btn-primary m-1\"\n            ></input>\n            <Result calories={this.state.counted} />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Inputs;\n","import React, { Component } from \"react\";\nimport Inputs from \"./Inputs\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          maxWidth: \"700px\"\n        }}\n      >\n        <Inputs />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}